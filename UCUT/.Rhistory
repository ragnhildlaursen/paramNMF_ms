sim_nb <- list()
sim_nb20 <- list()
n_datasets = 100
n_patients <- 100
n_sig = 5 # number of signatures including signature 1 and 5
alpha = 500
for (i in 1:n_datasets){
#set.seed(i+8302021)
set.seed(i+5675) # seed 2
sim_sig <- t(as.matrix(signatures[,c("SBS1","SBS5",sample(colnames(signatures)[-c(1,5)],n_sig-2))]))
#sim_sig <- t(as.matrix(signatures[,c(signatures_liver[c(1,3)],sample(signatures_liver[-c(1,3)],n_sig-2))]))
### Exposures ####
sim_exp <- matrix(rnbinom(n_patients*n_sig, mu=6000,size=1.5), nrow = n_patients)
### Data ####
V_true <- sim_exp%*%sim_sig
sim_pois[[i]] <- matrix(rpois(length(V_true), V_true), nrow = n_patients)
sim_nb[[i]] <- matrix(rnbinom(length(V_true), size = alpha, mu = V_true), nrow = n_patients)
#sim_nb20[[i]] <- matrix(rnbinom(length(V_true), size = 20, mu = V_true), nrow = n_patients)
}
#saveRDS(sim_pois, "SimulateLiver20Pois10sig100pat.rds")
saveRDS(sim_nb,paste0("Sim",n_datasets,"NB",alpha,"alpha",n_sig,"sig",n_patients,"pat2.rds"))
mut <- read.table(system.file("extdata","21_breast_cancers.mutations.txt",
package="signeR"), header=TRUE, check.names=FALSE)
install.packages("BiocManager")
BiocManager::install("signeR")
library(signeR)
mut <- read.table(system.file("extdata","21_breast_cancers.mutations.txt",
package="signeR"), header=TRUE, check.names=FALSE)
View(mut)
typeof(mut)
signatures <- signeR(M=mut, nlim=c(2,8))
View(mut)
### 10 alpha ############################################
simData = readRDS("Sim100NB10alpha5sig100pat2.rds")
setwd("C:/Users/au543194/Desktop/Noter/NegBin_CV/CV_ModSel_with_NB/OtherMethods")
setwd("C:\Users\au543194\Desktop\Noter\NegBin_CV\CV_ModSel_with_NB\OtherMethods")
setwd("C:/Users/au543194/Desktop/Noter/NegBin_CV/CV_ModSel_with_NB/OtherMethods")
### 10 alpha ############################################
simData = readRDS("Sim100NB10alpha5sig100pat2.rds")
dim(simData[[1]])
costRes = signeR(M=simData[[1]], nlim=c(2,3))
signatures$Nsign
# LIBRARIES
#library(BiocManager)
#BiocManager::install("SparseSignatures")
library("SparseSignatures") # Sparse signatures function
# LIBRARIES
#library(BiocManager)
#BiocManager::install("SparseSignatures")
install("SparseSignatures")
# LIBRARIES
#library(BiocManager)
#BiocManager::install("SparseSignatures")
install.packages("SparseSignatures", type = "source" )
library("SparseSignatures") # Sparse signatures function
install.packages("C:/Users/au543194/Desktop/Noter/NegBin_CV/CV_ModSel_with_NB/OtherMethods/SparseSignatures.zip", repos = NULL, type = "win.binary")
library("SparseSignatures") # Sparse signatures function
# run
for(j in 1:20){
costRes = nmfLassoCV(x=data,K=n_sig, normalize_counts = FALSE,
lambda_values_alpha = 0, lambda_values_beta = 0)
costRes$Nsig = n_sig[which.min(lapply(costRes$grid_search_mse, min))]
resSim[[j]] = costRes
saveRDS(resSim,"res20NB10alphaSparseSignature.rds")
# Track of how far
cat("Finished with iteration: 1.", j, "\n")
}
###################################################################
## SIMULATION RESULT
###################################################################
### 10 alpha ############################################
simData = readRDS("Sim100NB10alpha5sig100pat2.rds")
# variables
n_sig = c(2:8)
resSim = list()
# run
for(j in 1:20){
costRes = nmfLassoCV(x=data,K=n_sig, normalize_counts = FALSE,
lambda_values_alpha = 0, lambda_values_beta = 0)
costRes$Nsig = n_sig[which.min(lapply(costRes$grid_search_mse, min))]
resSim[[j]] = costRes
saveRDS(resSim,"res20NB10alphaSparseSignature.rds")
# Track of how far
cat("Finished with iteration: 1.", j, "\n")
}
###################################################################
## SIMULATION RESULT
###################################################################
### 10 alpha ############################################
simData = readRDS("Sim100NB10alpha5sig100pat2.rds")
# variables
n_sig = c(2:8)
resSim = list()
# run
for(j in 1:20){
costRes = nmfLassoCV(x=simData[[j]],K=n_sig, normalize_counts = FALSE,
lambda_values_alpha = 0, lambda_values_beta = 0)
costRes$Nsig = n_sig[which.min(lapply(costRes$grid_search_mse, min))]
resSim[[j]] = costRes
saveRDS(resSim,"res20NB10alphaSparseSignature.rds")
# Track of how far
cat("Finished with iteration: 1.", j, "\n")
}
# LIBRARIES
#library(BiocManager)
#BiocManager::install("SparseSignatures")
install.packages("SparseSignatures.zip", repos = NULL, type = "win.binary")
#setwd("C:/Users/au543194/Desktop/Noter/NegBin_CV/CV_ModSel_with_NB/OtherMethods")
#install.packages("BiocManager")
#BiocManager::install("signeR")
install.packages("signeR.zip", repos = NULL, type = "source")
# LIBRARIES
#library(BiocManager)
#BiocManager::install("SparseSignatures")
install.packages("SparseSignatures.zip", repos = NULL, type = "source")
install.packages()
# LIBRARIES
#library(BiocManager)
#BiocManager::install("SparseSignatures")
install.packages("SparseSignatures.zip")
# LIBRARIES
#library(BiocManager)
#BiocManager::install("SparseSignatures")
install.packages("SparseSignatures.zip", repos = NULL, type = "source")
#setwd("C:/Users/au543194/Desktop/Noter/NegBin_CV/CV_ModSel_with_NB/OtherMethods")
#install.packages("BiocManager")
#BiocManager::install("signeR")
library(devtools)
devtools::install_local("signeR.zip")
library(signeR)
### 10 alpha ############################################
simData = readRDS("Sim100NB10alpha5sig100pat2.rds")
library(signeR)
### 10 alpha ############################################
simData = readRDS("Sim100NB10alpha5sig100pat2.rds")
# variables
n_sig = c(2:8)
resSim = list()
# run
for(j in 1:20){
costRes = signeR(M=simData[[j]], nlim=c(2,8))
resSim[[j]] = costRes
saveRDS(resSim,"res20NB10alphaSigneR.rds")
# Track of how far
cat("Finished with iteration: 1.", j, "\n")
}
#setwd("C:/Users/au543194/Desktop/Noter/NegBin_CV/CV_ModSel_with_NB/OtherMethods")
#install.packages("BiocManager")
#BiocManager::install("signeR")
devtools::install_local("signeR.zip")
library(signeR)
### 10 alpha ############################################
simData = readRDS("Sim100NB10alpha5sig100pat2.rds")
# variables
n_sig = c(2:8)
resSim = list()
# run
for(j in 1:20){
costRes = signeR(M=simData[[j]], nlim=c(2,8))
resSim[[j]] = costRes
saveRDS(resSim,"res20NB10alphaSigneR.rds")
# Track of how far
cat("Finished with iteration: 1.", j, "\n")
}
### 200 alpha ############################################
simData = readRDS("Sim100NB200alpha5sig100pat2.rds")
# variables
n_sig = c(2:8)
resSim = list()
# run
for(j in 1:20){
costRes = signeR(M=simData[[j]], nlim=c(2,8))
resSim[[j]] = costRes
saveRDS(resSim,"res20NB200alphaSigneR.rds")
# Track of how far
cat("Finished with iteration: 2.", j, "\n")
}
### 500 alpha ############################################
simData = readRDS("Sim100NB500alpha5sig100pat2.rds")
# variables
n_sig = c(2:8)
resSim = list()
# run
for(j in 1:20){
costRes = signeR(M=simData[[j]], nlim=c(2,8))
resSim[[j]] = costRes
saveRDS(resSim,"res20NB500alphaSigneR.rds")
# Track of how far
cat("Finished with iteration: 3.", j, "\n")
}
#setwd("C:/Users/au543194/Desktop/Noter/NegBin_CV/CV_ModSel_with_NB/OtherMethods")
#install.packages("BiocManager")
#BiocManager::install("signeR")
devtools::install_local("signeR.zip")
library(signeR)
### 10 alpha ############################################
simData = readRDS("Sim100NB10alpha5sig100pat2.rds")
# variables
n_sig = c(2:8)
resSim = list()
# run
for(j in 1:20){
costRes = signeR(M=simData[[j]], nlim=c(2,8))
resSim[[j]] = costRes
saveRDS(resSim,"res20NB10alphaSigneR.rds")
# Track of how far
cat("Finished with iteration: 1.", j, "\n")
}
#setwd("C:/Users/au543194/Desktop/Noter/NegBin_CV/CV_ModSel_with_NB/OtherMethods")
#install.packages("BiocManager")
BiocManager::install("signeR")
library(foreach)
library(doParallel)
library(parallel)
library(signeR)
cores=detectCores()
cl <- makeCluster(cores[1])
registerDoParallel(cl)
resSim = foreach(j=1:5, .combine=c, .packages=c('signeR'), .export = ls(globalenv())) %dopar% {
signeR(M=simData[[j]], nlim=c(2,8), Mheader = FALSE)
}
resSim = foreach(j=1:5, .combine=c, .packages=c('signeR'), .export = ls(globalenv())) %dopar% {
signeR(M=simData[[j]], nlim=c(2,3), Mheader = FALSE)
}
### 10 alpha ############################################
simData = readRDS("data/Sim100NB10alpha5sig100pat2.rds")
resSim = foreach(j=1:5, .combine=c, .packages=c('signeR'), .export = ls(globalenv())) %dopar% {
signeR(M=simData[[j]], nlim=c(2,3), Mheader = FALSE)
}
stopCluster(cl)
res = readRDS("res20NB10alphaSigneR.rds")
################################################
## Plot results
###############################################
setwd("C:/Users/au543194/Desktop/Noter/NegBin_CV/CV_ModSel_with_NB/OtherMethods/results")
res = readRDS("res20NB10alphaSigneR.rds")
hist(as.numeric(res[which(names(res) == "Nsign")]))
res = readRDS("res20NB200alphaSigneR.rds")
res[which(names(res) == "Nsign")]
res = readRDS("res20NB200alphaSigneR.rds")
hist(as.numeric(res[which(names(res) == "Nsign")]))
table(as.numeric(res[which(names(res) == "Nsign")]))
hist(table(as.numeric(res[which(names(res) == "Nsign")])))
setwd("~/projects/Parametrization/UCUTcode")
##-----------------------------------------------------
## UCUT 26 data analysis
##-----------------------------------------------------
source("GitModelSelection.R")
## Load UCUT data
load("UCUT_5_all.RData")
V5 = Vall   # data (No. Mutation types) x (No. patients)
V5[V5 == 0] = .Machine$double.eps
## Avoid columns or rows that sum to zero in EM algorithm
##--------------------------------------------------------
## Factors
##--------------------------------------------------------
## First and second left flanking nucleotide
l1 = factor(substr(rownames(V5), start = 1, stop = 1))
l2 = factor(substr(rownames(V5), start = 9, stop = 9))
## Actual point mutation
m = factor(substr(rownames(V5), start = 3,stop = 5))
## First and second right flanking nucleotide
r1 = factor(substr(rownames(V5), start = 7, stop = 7))
r2 = factor(substr(rownames(V5), start = 11, stop = 11))
##--------------------------------------------------------
## Parametrizations of a signature
##--------------------------------------------------------
Mmono = model.matrix(~0+l2+l1+m+r1+r2)          # Mono-nucleotide model
Mdi = model.matrix(~0+l2*m+l1*m+m*r1+m*r2)      # Di-nucleotide interaction with mutation
Mblend = model.matrix(~0+l2+l1*m+m*r1+r2)       # Blended mono-di-nucleotide model
Mcombi = model.matrix(~0+l2+l1*m*r1+r2)         # Combined mono-tri-nucleotide model
Mtri =  model.matrix(~0+l1*m*r1)                # Tri-nucleotide model (only one flanking nucleotide)
Mnghbr = model.matrix(~0+l2*l1+l1*m+m*r1+r1*r2) # Di-nucleotide interaction with neighbour
Mfull = model.matrix(~0+l2*l1*l1*m*m*r1*r1*r2)
## List of the 21 models
MList <- list(list(Mmono,Mmono),
list(Mdi,Mdi),list(Mmono,Mdi),
list(Mblend,Mblend),list(Mmono,Mblend),list(Mdi,Mblend),
list(Mcombi,Mcombi),list(Mmono,Mcombi),list(Mdi,Mcombi),list(Mblend,Mcombi),
list(Mtri,Mtri),list(Mmono,Mtri),list(Mdi,Mtri),list(Mblend,Mtri),
list(Mcombi,Mtri),
list(Mnghbr,Mnghbr),list(Mmono,Mnghbr),list(Mdi,Mnghbr),list(Mblend,Mnghbr),
list(Mcombi,Mnghbr),list(Mtri,Mnghbr))
nModels <- length(MList)
out = NMFglmSQR(Data = V5, DesignMatrix = list(Mfull,Mfull), tolerance = 1)
V5 = Vall   # data (No. Mutation types) x (No. patients)
## UCUT has 1536 mutation types and 26 patients
V5[V5 == 0] = .Machine$double.eps # Zero entries are resplaced with epsilon to avoid division by zero in EM-algorithm
##--------------------------------------------------------
## Factors
##--------------------------------------------------------
## First and second left flanking nucleotide
l1 = factor(substr(rownames(V5), start = 1, stop = 1))
l2 = factor(substr(rownames(V5), start = 9, stop = 9))
## Actual point mutation
m = factor(substr(rownames(V5), start = 3,stop = 5))
## First and second right flanking nucleotide
r1 = factor(substr(rownames(V5), start = 7, stop = 7))
r2 = factor(substr(rownames(V5), start = 11, stop = 11))
##--------------------------------------------------------
## Parametrizations of a signature
##--------------------------------------------------------
Mmono = model.matrix(~0+l2+l1+m+r1+r2)          # Mono-nucleotide model
Mdi = model.matrix(~0+l2*m+l1*m+m*r1+m*r2)      # Di-nucleotide interaction with mutation
Mblend = model.matrix(~0+l2+l1*m+m*r1+r2)       # Blended mono-di-nucleotide model
Mcombi = model.matrix(~0+l2+l1*m*r1+r2)         # Combined mono-tri-nucleotide model
Mtri =  model.matrix(~0+l1*m*r1)                # Tri-nucleotide model (only one flanking nucleotide)
Mnghbr = model.matrix(~0+l2*l1+l1*m+m*r1+r1*r2) # Di-nucleotide interaction with neighbour
Mfull = model.matrix(~0+l2*l1*m*r1*r2)          # Full parametrized model
## List of the 21 models
MList <- list(list(Mmono,Mmono),
list(Mdi,Mdi),list(Mmono,Mdi),
list(Mblend,Mblend),list(Mmono,Mblend),list(Mdi,Mblend),
list(Mcombi,Mcombi),list(Mmono,Mcombi),list(Mdi,Mcombi),list(Mblend,Mcombi),
list(Mtri,Mtri),list(Mmono,Mtri),list(Mdi,Mtri),list(Mblend,Mtri),
list(Mcombi,Mtri),
list(Mnghbr,Mnghbr),list(Mmono,Mnghbr),list(Mdi,Mnghbr),list(Mblend,Mnghbr),
list(Mcombi,Mnghbr),list(Mtri,Mnghbr))
nModels <- length(MList)
##-----------------------------------------------------------
## Matrix with summary of the results
##-----------------------------------------------------------
resMat <- matrix(0,nrow=nModels,ncol=5)
colnames(resMat) <- c("nprm1","nprm2","nprmtot","seed","GKL")
## identify global minimum
## Second run EM algorithm with seed from global minimum but
## with low tolerance (i.e. until convergence)
## Here we use high tolerance=25 and low tolerance=5
## to run the algorithm in a few minutes.
## In order to obtain the results in the paper you *must* run with
## high tolerance=5 and low tolerance=1.
## On a normal laptop this takes around 12 hours.
## The GKL is summarized in resMat.
## We provide resMat for our run in file "GitUCUT26results.txt"
high.tolerance <- 25
low.tolerance <- 5
for (i in 1:nModels){
nprm1 <- ncol( MList[[i]][[1]] )
nprm2 <- ncol( MList[[i]][[2]] )
resMat[i,1] <- nprm1
resMat[i,2] <- nprm2
resMat[i,3] <- nprm1+nprm2
tmp <- rep(0,30)
cat("Model:",i,"","\n")
cat("EM Run: ")
for (j in 1:length(tmp)){
cat(j,"")
tmp[j] <-
NMFglmSQR(Data=V5,DesignMatrix=MList[[i]],tolerance=high.tolerance,Seeds=j)$gkl
## Run the EM algorithm many times with a high tolerance to identify global minimum
}
## Choose the best initial value and run again until convergence, i.e.
## stop when the tolerance is small
cat("\n")
jmin <- which.min(tmp)
resMat[i,4] <- jmin
res <- NMFglmSQR(Data=V5,NoSignatures=2,DesignMatrix=MList[[i]],tolerance=low.tolerance,Seeds=jmin)$gkl
##
resMat[i,5] <- res
cat("Final result:","nprm1:",nprm1,"; nprm2:",nprm2,
"; nprmtotal:",nprm1+nprm2,"; seed:",jmin,", GKL:",res,"\n" )
}
resMat <- resMat[sort(resMat[,"nprmtot"],index=TRUE)$ix,]
print(resMat)
##-----------------------------------------
## UCUT26: Table and plots of GKL and BIC
##-----------------------------------------
## Read data:
## Model for the two signatures (given by number of parameters)
## and corresponding GKL
resMat <- matrix( scan(file="GitUCUT26results.txt"),ncol=4,byrow=21 )
colnames(resMat) <- c("nprm1","nprm2","nprmtot","GKL")
## Parameters and corresponding factor models
prm.str <- c(18,48,66,78,102,96)
col.str <- c("orange","skyblue","blue","brown","green","red")
mdl.str <- c(expression(L[2]+L[1]+M+R[1]+R[2]),
expression(L[2]+L[1]~x~M+M~x~R[1]+R[2]),
expression(L[2]~x~L[1]+L[1]~x~M+M~x~R[1]+R[1]~x~R[2]),
expression(L[2]~x~M+L[1]~x~M+M~x~R[1]+M~x~R[2]),
expression(L[2]+L[1]~x~M~x~R[1]+R[2]),
expression(L[1]~x~M~x~R[1]))
##------------------------------------------------------
## Table with summary statistics for all 21 models
##------------------------------------------------------
resMat <- cbind(resMat,rep(0,21),rep(0,21),rep(0,21))
colnames(resMat)[5] <- "Complexity"
colnames(resMat)[6] <- "rawBIC"
colnames(resMat)[7] <- "diffBIC"
number.nonz <- 5260
resMat[,"Complexity"] <- resMat[,"nprmtot"]*log( number.nonz )
resMat[,"rawBIC"] <- resMat[,"Complexity"]+2*resMat[,"GKL"]
resMat[,"diffBIC"] <- resMat[,"rawBIC"]-min(resMat[,"rawBIC"])
print(resMat[,c("nprm1","nprm2","Complexity","GKL","rawBIC","diffBIC")])
##-------------------------------------------------------
## Table with summary statistics for the six models
## where the two signatures have the same parametrization
##-------------------------------------------------------
sameIndx <- which(resMat[,"nprm1"]==resMatr[,"nprm2"])
sameRes <- resMat[sameIndx,]
##-------------------------------------------------------
## Table with summary statistics for the six models
## where the two signatures have the same parametrization
##-------------------------------------------------------
sameIndx <- which(resMat[,"nprm1"]==resMat[,"nprm2"])
sameRes <- resMat[sameIndx,]
indx <- c(5,1,2,4,6,3)
sameRes <- sameRes[indx,]
print(sameRes)
##---------------------------------------------------
## Plot the GKL for the six models where the two signatures
## have the same parametrization
## The plot is saved in the file UCUT26GKLsame.pdf
##------------------------------------------------
#pdf(file="UCUT26GKLsame.pdf",width=8,height=6)
plot(1:6,sameRes[,"GKL"],ylim=(range(sameRes[indx,"GKL"])+c(0,800)),
xlab="Model",ylab="Generalized Kullback-Leibler (GKL)",pch=19,cex.lab=1.3,cex.axis=1.3)
points(1:6,sameRes[,"GKL"],type="l")
mx <- max(resMatr[,"GKL"])+800
for (i in indx){
points(i,mx,pch=15,col=col.str[match(sameRes[i,"nprm1"],prm.str)],cex=1.5)
points(i,mx-200,pch=15,col=col.str[match(sameRes[i,"nprm2"],prm.str)],cex=1.5)
text(i,mx-400,sameRes[i,"nprmtot"])
}
mx <- max(resMat[,"GKL"])+800
for (i in indx){
points(i,mx,pch=15,col=col.str[match(sameRes[i,"nprm1"],prm.str)],cex=1.5)
points(i,mx-200,pch=15,col=col.str[match(sameRes[i,"nprm2"],prm.str)],cex=1.5)
text(i,mx-400,sameRes[i,"nprmtot"])
}
## Add factor and number of parameters to plot
yval <- mx-600
text(2.8,yval,"Parametrization",pos=4)
text(5.5,yval+70,"Number of",pos=NULL) ; text(5.5,yval,"parameters",pos=NULL)
j <- 0
for (i in c(1,6,2,4,5,3)){
j <- j+1
points(2.8,yval-100*j,pch=15,col=col.str[i],cex=1.5)
text(3,yval-100*j,mdl.str[i],pos=4)
text(5.5,yval-100*j,prm.str[i],pos=2)
}
#dev.off()
##-------------------------------------------------------------------------
## GKL plot of the 21 models
##---------------------------
## Index of plotting
indx <-     c(1,6,2,4,8,3, 19,11,17,20,15, 5,9,13,7, 14,18,12, 21,16, 10)
prm.indx <- c(1,1,1,1,1,1,  1, 2, 2, 2, 1, 1,2, 1,1,  1, 1, 1, 1, 1,  1)
mdl.indx <- c(1:6,8:12,14:17,19:21,23,24,26)
#pdf(file="UCUT26GKLnew.pdf",width=10,height=5)
plot(mdl.indx,resMat[indx,"GKL"],ylim=(range(resMat[,"GKL"])+c(0,800)),
xlab="Model",ylab="Generalized Kullback-Leibler (GKL)",
pch=19,cex.lab=1.2,cex.axis=1.2,xaxt='n')
points(mdl.indx,resMat[indx,"GKL"],type="l")
abline(v=c(7,13,18,22,25),col="gray")
axis(side=1,at=mdl.indx,labels=1:21,cex.axis=1.2)
mx <- max(resMatr[,"GKL"])+800
j <- 0
for (i in indx){
j <- j+1
points(mdl.indx[j],ifelse(prm.indx[j]==1,mx,mx-200),pch=15,col=col.str[match(resMat[i,"nprm1"],prm.str)],cex=1.5)
points(mdl.indx[j],ifelse(prm.indx[j]==1,mx-200,mx),pch=15,col=col.str[match(resMat[i,"nprm2"],prm.str)],cex=1.5)
text(mdl.indx[j],mx-400,resMat[i,"nprmtot"],cex=0.9)
}
## Text concerning poor fit
text(3,10600,"Poor fit to data",pos=4)
arrows(4,10500,1.3,10420,length=0.15,angle=20,lwd=2)
arrows(5,10500,7.7,10180,length=0.15,angle=20,lwd=2)
## Add factor and number of parameters to plot
xval <- 16 ; yval <- 10500
text(xval,yval,"Parametrization of signature",pos=4)
text(xval+8,yval+90,"Number of",pos=4) ; text(xval+8,yval,"parameters",pos=4)
for (i in 1:6){
points(xval-0.5,yval-120*i,pch=15,col=col.str[i],cex=1.5)
text(xval,yval-120*i,mdl.str[i],pos=4)
text(xval+10,yval-120*i,prm.str[i],pos=2)
}
#dev.off()
##--------------------------------------
## BIC plot of the 21 models
##--------------------------------------
#pdf(file="UCUT26BICnew.pdf",width=10,height=5)
plot(mdl.indx,resMat[indx,"rawBIC"],ylim=(range(resMat[,"rawBIC"])+c(0,800)),
xlab="Model",ylab="Bayesian Information Criterion (BIC)",
pch=19,cex.lab=1.2,cex.axis=1.2,xaxt='n')
points(mdl.indx,resMat[indx,"rawBIC"],type="l")
abline(v=c(7,13,18,22,25),col="gray")
axis(side=1,at=mdl.indx,labels=1:21,cex.axis=1.2)
mx <- max(resMat[,"rawBIC"])+800
j <- 0
for (i in indx){
j <- j+1
points(mdl.indx[j],ifelse(prm.indx[j]==1,mx,mx-200),pch=15,col=col.str[match(resMat[i,"nprm1"],prm.str)],cex=1.5)
points(mdl.indx[j],ifelse(prm.indx[j]==1,mx-200,mx),pch=15,col=col.str[match(resMat[i,"nprm2"],prm.str)],cex=1.5)
text(mdl.indx[j],mx-400,resMat[i,"nprmtot"],cex=0.9)
}
#abline(h=19650,lwd=2,col="black",lty="dotted")
#text(1,19500,"Appropriate models below dotted line",pos=4)
text(26,19147,pos=3,"1") ; text(17,19264,pos=3,"2") ; text(21,19353,pos=3,"3")
text(24,19573,pos=3,"4") ; text(12,19742,pos=3,"5") ; text(6,20060,pos=3,"6")
text(10,19700,pos=2,"BIC ranking")
arrows(10,19700,11.7,19900,length=0.15,angle=20,lwd=2)
##-----------------------------------------------------
## UCUT 26 data analysis
##-----------------------------------------------------
source("GitModelSelection.R")
## Load UCUT data
load("UCUT_5_all.RData")
V5 = Vall   # data (No. Mutation types) x (No. patients)
nmf(V5,2)
V5
#library("magic")
load("BRCA21.RData")
