#setwd("C:/Users/au543194/Documents/projects/paramNMF_ms")
################################################################
## Robustness of Signatures
################################################################
# library(foreach)
# library(doParallel)
# library(parallel)
#
# cores=detectCores()
# cl <- makeCluster(cores[1]-1)
setwd("~/projects/paramNMF_ms")
library(ggplot2)
library(ggpubr)
source("BRCA/loadBRCAmodels.R")
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 4
nSim <- 10  # 5 if small study. 100 if intermediate. 200 if large.
init = 20   # number of initialisations
tolhigh = 1
tol = 0.2
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=c(1:init))
source("BRCA/loadBRCAmodels.R")
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 4
nSim <- 10  # 5 if small study. 100 if intermediate. 200 if large.
init = 20   # number of initialisations
tolhigh = 1
tol = 0.2
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=c(1:init))
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
source("BRCA/loadBRCAmodels.R")
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 4
nSim <- 10  # 5 if small study. 100 if intermediate. 200 if large.
init = 20   # number of initialisations
tolhigh = 1
tol = 0.2
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
tol = 0.01
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
source("BRCA/loadBRCAmodels.R")
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 4
nSim <- 10  # 5 if small study. 100 if intermediate. 200 if large.
init = 20   # number of initialisations
tolhigh = 1
tol = 0.1
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
source("BRCA/loadBRCAmodels.R")
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 4
nSim <- 10  # 5 if small study. 100 if intermediate. 200 if large.
init = 20   # number of initialisations
tolhigh = 1
tol = 0.1
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
source("BRCA/loadBRCAmodels.R")
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 4
nSim <- 10  # 5 if small study. 100 if intermediate. 200 if large.
init = 20   # number of initialisations
tolhigh = 1
tol = 0.1
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
source("BRCA/loadBRCAmodels.R")
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 4
nSim <- 10  # 5 if small study. 100 if intermediate. 200 if large.
init = 20   # number of initialisations
tolhigh = 1
tol = 0.1
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
TriRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mfull),noSig), tol=tol,Seeds=c(1:init))
MonoRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mmono),noSig),tol=tol,Seeds=c(1:init))
Mdi
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
tol = 0.2
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
init
tol = 0.15
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
source("BRCA/loadBRCAmodels.R")
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 4
nSim <- 10  # 5 if small study. 100 if intermediate. 200 if large.
init = 20   # number of initialisations
tolhigh = 1
tol = 0.1
TriRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mfull),noSig), tol=tol,Seeds=c(1:init))
source("BRCA/loadBRCAmodels.R")
TriRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mfull),noSig), tol=tol,Seeds=c(1:init))
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
res1Conv = DiRes$AllResults
View(res1Conv)
res1Conv = DiRes$AllResults[[2]][[7]]
res2Conv = DiRes$AllResults[[2]][[12]]
cosMatch(res1Conv,res2Conv)
res3Conv = DiRes$AllResults[[2]][[13]]
cosMatch(res1Conv,res3Conv)
cosMatch(res2Conv,res3Conv)
res1Conv = DiRes$AllResults[[2]][[7]] # 2059
res2Conv = DiRes$AllResults[[2]][[12]] # 2087
res3Conv = DiRes$AllResults[[2]][[13]] # 2116
res4Conv = DiRes$AllResults[[2]][[15]] # 2120
res5Conv = DiRes$AllResults[[2]][[9]] # 2125
cosMatch(res4Conv,res5Conv)
cosMatch(res4Conv,res3Conv)
cosMatch(res5Conv,res3Conv)
init = 20   # number of initialisations
tol = 0.1
DiRes2 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=c(25:35))
res21 = DiRes2$AllResults[[2]][[3]] # 2088
res22 = DiRes2$AllResults[[2]][[8]] # 2109
cosMatch(res2,res21)
res1 = DiRes$AllResults[[2]][[7]] # 2059
res2 = DiRes$AllResults[[2]][[12]] # 2087
res3 = DiRes$AllResults[[2]][[13]] # 2116
res4 = DiRes$AllResults[[2]][[15]] # 2120
res5 = DiRes$AllResults[[2]][[9]] # 2125
cosMatch(res2,res21)
cosMatch(res1,res21)
DiRes3 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=c(36:50))
res31 = DiRes3$AllResults[[2]][[2]] # 2122
res32 = DiRes3$AllResults[[2]][[5]] # 2134
res33 = DiRes3$AllResults[[2]][[13]] # 2107
cosMatch(res31,res32)
cosMatch(res31,res4)
cosMatch(res31,res5)
cosMatch(res32,res5)
cosMatch(res22,res33)
DiRes3$AllResults[[3]][13]
dim(V)
noSig
# now changed to higher max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=c(51:70))
source("BRCA/loadBRCAmodels.R")
# now changed to higher max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=c(51:70))
res41 = DiRes4$AllResults[[2]][[7]] # 2116
res42 = DiRes4$AllResults[[2]][[9]] # 2140
res43 = DiRes4$AllResults[[2]][[12]] # 2113
res44 = DiRes4$AllResults[[2]][[17]] # 2124
res45 = DiRes4$AllResults[[2]][[20]] # 2107
cosMatch(res41,res43)
cosMatch(res41,res3)
cosMatch(res45,res33)
res31 = DiRes3$AllResults[[2]][[2]] # 2122
res32 = DiRes3$AllResults[[2]][[5]] # 2134
res33 = DiRes3$AllResults[[2]][[13]] # 2107
res33 = DiRes3$AllResults[[3]][[13]]
res33 = DiRes3$AllResults[[2]][[13]]
DiRes3$AllResults[[2]][[13]]
DiRes3$AllResults[[3]][[13]]
res31 = DiRes3$AllResults[[2]][[2]] # 2122
res32 = DiRes3$AllResults[[2]][[5]] # 2134
res33 = DiRes3$AllResults[[2]][[13]] # 2107
cosMatch(res44,res42)
# Try Mix Result
MixRes4 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = list(Mmono,Mdi,Mdi,Mtri),tol=tol,Seeds=c(51:70))
# Try Mix Result
MixRes4 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = list(Mmono,Mdi,Mdi,Mfull),tol=tol,Seeds=c(51:70))
cosMatch(MixRes4$Signatures,MixRes4$AllResults[[2]][[3]])
cosMatch(MixRes4$Signatures,MixRes4$AllResults[[2]][[20]])
cosMatch(MixRes4$Signatures,MixRes4$AllResults[[2]][[4]])$cossim
cosMatch(MixRes4$Signatures,MixRes4$AllResults[[2]][[17]])$cossim
cosMatch(MixRes4$Signatures,MixRes4$AllResults[[2]][[5]])$cossim
source("BRCA/loadBRCAmodels.R")
init = 20   # number of initialisations
tol = 0.1
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
tol = 0.1
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
source("BRCA/loadBRCAmodels.R")
init = 20   # number of initialisations
tol = 0.1
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
MixRes4$AllResults[[3]]
gklval = MixRes4$AllResults[[3]]
gklval[which(gklval<2000)]
which(gklval<2000)
for(i in which(gklval<2000)){
cosMatch(MixRes4$Signatures,MixRes4$AllResults[[2]][[i]])$cossim
}
for(i in which(gklval<2000)){
print(cosMatch(MixRes4$Signatures,MixRes4$AllResults[[2]][[i]])$cossim)
}
for(i in which(gklval<1870)){
print(cosMatch(MixRes4$Signatures,MixRes4$AllResults[[2]][[i]])$cossim)
}
which(gklval<1870)
for(i in which(gklval<1870)){
print(cosMatch(MixRes4$AllResults[[2]][[3]],MixRes4$AllResults[[2]][[i]])$cossim)
}
gklval[which(gklval<1870)]
gklval = DiRes4$AllResults[[3]]
gklval[which(gklval<2150)]
gklval = DiRes4$AllResults[[3]]
gklval[which(gklval<2150)]
for(i in which(gklval<2150)){
print(cosMatch(DiRes4$Signatures,DiRes4$AllResults[[2]][[i]])$cossim)
}
which(gklval<2150)
for(i in which(gklval<2150)){
print(cosMatch(DiRes4$AllResults[[2]][[20]],DiRes4$AllResults[[2]][[i]])$cossim)
}
source("BRCA/loadBRCAmodels.R")
tol = 0.2
DiRes <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=sample(1:1000,init))
dim(DiRes$intermed)
plot(DiRes$intermed[,469])
plot(DiRes$intermed[-c(1:1000),469])
par(mfrow = c(4,4))
for(i in c(401:416)){
plot(DiRes$intermed[-c(1:1000),i])
}
for(i in c(401:416)){
plot(DiRes$intermed[-c(1:100),i])
}
gklval = DiRes4$AllResults[[3]]
gklval[which(gklval<2150)]
gklval[which(gklval<2140)]
for(i in which(gklval<2150)){
print(cosMatch(DiRes4$Signatures,DiRes4$AllResults[[2]][[i]])$cossim)
}
gklval = MixRes4$AllResults[[3]]
gklval
gklval[which(gklval<1870)]
for(i in which(gklval<1870)){
print(cosMatch(MixRes4$Signatures,MixRes4$AllResults[[2]][[i]])$cossim)
}
for(i in which(gklval<1870)){
print(cosMatch(MixRes4$AllResults[[2]][[3]],MixRes4$AllResults[[2]][[i]])$cossim)
}
plot(DiRes4$intermed[-c(1:1000),469])
par(mfrow = c(1,1))
plot(DiRes4$intermed[-c(1:1000),469])
plot(DiRes4$intermed[,469])
plot(DiRes4$intermed[-c(1:100),469])
plot(DiRes4$intermed[-c(1:1000),469])
par(mfrow = c(4,4))
for(i in c(401:416)){
plot(DiRes$intermed[-c(1:100),i])
}
for(i in c(401:416)){
plot(DiRes4$intermed[-c(1:100),i])
}
for(i in c(301:316)){
plot(DiRes4$intermed[-c(1:100),i])
}
cosMatch(res41,res43)$cossim
Mdi = model.matrix(~L*M + M*R)    # di-nucleotide model
Mdi
source("BRCA/loadBRCAmodels.R")
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=c(71:90))
tol = 0.1
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=c(71:90))
source("BRCA/loadBRCAmodels.R")
# Try Mix Result
MixRes4 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = list(Mmono,Mdi,Mdi,Mfull),tol=tol,Seeds=c(52:70))
# Try Mix Result
MixRes4 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = list(Mmono,Mdi,Mdi,Mfull),tol=tol,Seeds=c(53:70))
# Try Mix Result
MixRes4 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = list(Mmono,Mdi,Mdi,Mfull),tol=tol,Seeds=c(53:70))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=c(73:90))
image(Mdi)
par(mfrow = c(1,1))
image(Mdi)
image(t(Mdi))
Mdi = model.matrix(~M + L*M + M*R)    # di-nucleotide model
image(t(Mdi))
Mdi = model.matrix(~M + L + R + M*L + M*R)    # di-nucleotide model
image(t(Mdi))
image(t(Mdi))
Mdi = model.matrix(~M + M*L + M*R)    # di-nucleotide model
image(t(Mdi))
Mdi = model.matrix(~M  + L + R + M*L + M*R)    # di-nucleotide model
image(t(Mdi))
Mdi = model.matrix(~M  + L + R + L*M + M*R)    # di-nucleotide model
image(t(Mdi))
Mdi = model.matrix(~L*M + M*R)    # di-nucleotide model
image(t(Mdi))
Mdi = model.matrix(~M + L*M + M*R)    # di-nucleotide model
source("BRCA/loadBRCAmodels.R")
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),noSig),tol=tol,Seeds=c(73:90))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(73:90))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(73:90))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(173:190))
source("BRCA/loadBRCAmodels.R")
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(173:190))
source("BRCA/loadBRCAmodels.R")
source("BRCA/loadBRCAmodels.R")
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(173:190))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(180:190))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(191:200))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(201:214))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(191:200))
source("BRCA/loadBRCAmodels.R")
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(191:200))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(300:320))
source("BRCA/loadBRCAmodels.R")
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(300:320))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 3, DesignMatrix = rep(list(Mdi),3),tol=tol,Seeds=c(350:400))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 4, DesignMatrix = rep(list(Mdi),4),tol=tol,Seeds=c(191:200))
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 4, DesignMatrix = rep(list(Mdi),4),tol=tol,Seeds=c(200:250))
#' @return A list of the matrices derived by the factorization and the corresponding generalized Kullback-Leibler
#' \itemize{
#'  \item Signature  - Non-negative matrix of dimension  NoSignatures x ncol(Data), with rows summing to one
#'  \item Exposure   - Non-negative matrix of dimension nrow(Data) x NoSignatures
#'  \item gkl - Smallest Value of the Generalized Kullback-Leibler
#'  }
#'
#' @export
#'
#'
NMFglmSQR = function(Data, NoSignatures = length(DesignMatrix),
DesignMatrix = rep(list(diag(ncol(Data))),NoSignatures),
tolerance = 1e-2, maxIter = 300, Seeds = c(1,2,3), Exposures = NULL, Signatures = NULL){
if(!is.list(DesignMatrix)) stop("DesignMatrix needs to be a list of matrices.")
if(NoSignatures != length(DesignMatrix)) stop("NoSignatures different from number of specified matrices in DesignMatrix.")
if(any(sapply(DesignMatrix,nrow) != ncol(Data))) stop("The number of rows for matrices in DesignMatrix needs to equal the columns in Data.")
fixSig = FALSE
fixExp = FALSE
if(!is.null(Signatures)){
fixSig = TRUE
if(any(dim(Signatures) != c(NoSignatures,ncol(Data)))){
stop("The dimensions of the Signatures does not match the Data and NoSignatures")
}
}
if(!is.null(Exposures)){
fixExp = TRUE
if(any(dim(Exposures) != c(nrow(Data),NoSignatures))){
stop("The dimensions of the Exposures does not match the Data and NoSignatures")
}
}
Genomes       = dim(Data)[1]  # genomes
MutationTypes = dim(Data)[2]  # mutation types
GKLvalues = rep(0,length(Seeds)) # Vector of different Generalised Kullback Leibler(GKL) values
conv = logical(length(Seeds))
Signaturelist = list()           # list of signature matrices
Exposurelist = list()            # list of exposure matrices
## Function with one E and M step
EMstep = function(x){
par = exp(x)
if(!fixExp){
Exposures = matrix(par[c(1:(Genomes*NoSignatures))], nrow = Genomes, ncol = NoSignatures)
}
if(!fixSig){
Signatures = matrix(par[-c(1:(Genomes*NoSignatures))], nrow = NoSignatures, ncol = MutationTypes)
}
if(!fixSig){
EstimateOfData = Exposures%*%Signatures
regularUpdate = Signatures * (t(Exposures) %*% (Data/EstimateOfData))
Signatures = t(sapply(1:NoSignatures, function(k) glm.update(regularUpdate[k,], DesignMatrix[[k]]))) # glm update of Signatures
Signatures = Signatures * 1/rowSums(Signatures)          # make sure the rows sum to one
}
if(!fixExp){
EstimateOfData = Exposures%*%Signatures
Exposures = Exposures * ((Data/EstimateOfData) %*% t(Signatures)) # update of exposures
}
par = c(as.vector(Exposures),as.vector(Signatures))
par[par <= .Machine$double.eps] = .Machine$double.eps
logpar = log(par) # using log-scale to also allow negative values
return(logpar)
}
# Function to create GKL value
gklobj = function(x){
par = exp(x)
Exposures = matrix(par[c(1:(Genomes*NoSignatures))], nrow = Genomes, ncol = NoSignatures)
Signatures = matrix(par[-c(1:(Genomes*NoSignatures))], nrow = NoSignatures, ncol = MutationTypes)
EstimateOfData = Exposures%*%Signatures
GKL <- gkl.dev(as.vector(Data),as.vector(EstimateOfData)) # GKLD value
return(GKL)
}
for(i in 1:length(Seeds)){
set.seed(Seeds[i])                                              # Setting fixed seed
if(!fixExp){
Exposures = matrix(runif(Genomes*NoSignatures),
nrow = Genomes, ncol = NoSignatures)       # Initialize Exposures
}
if(!fixSig){
Signatures = matrix(runif(NoSignatures*MutationTypes),
nrow = NoSignatures, ncol = MutationTypes)  # Initialize Signatures
}
Initial = c(as.vector(Exposures),as.vector(Signatures))
#SQUAREM run of the EM algorithm
ResultSqr = squarem(Initial, fixptfn = EMstep, objfn = gklobj, control = list(tol = tolerance, maxiter = maxIter, intermed = TRUE))
par = exp(ResultSqr$par) # parameters
intermed = ResultSqr$p.intermed
#print(ResultSqr$fpevals)
cat("Seed ", i," had GKL: ",gklobj(log(par)), ". Converged ", ResultSqr$convergence, " in ", ResultSqr$fpevals, " iterations. \n")
#print(gklobj(log(par)))
Exposures = matrix(par[c(1:(Genomes*NoSignatures))], nrow = Genomes, ncol = NoSignatures)
Signatures = matrix(par[-c(1:(Genomes*NoSignatures))], nrow = NoSignatures, ncol = MutationTypes)
conv[i] = ResultSqr$convergence
GKLvalues[i] = gklobj(log(par))
Signaturelist[[i]] = Signatures
Exposurelist[[i]] = Exposures
}
optimal = which.min(GKLvalues)
SignatureOptimal = Signaturelist[[optimal]]
ExposureOptimal = Exposurelist[[optimal]]
# Make columns of signatures sum to one
ExposureOptimal =  ExposureOptimal%*%diag(rowSums(SignatureOptimal))
SignatureOptimal = diag(1/rowSums(SignatureOptimal))%*%SignatureOptimal
Output = list()
Output$Signatures = SignatureOptimal
Output$Exposures = ExposureOptimal
Output$gkl = GKLvalues[optimal]
Output$prmSignatures = sapply(DesignMatrix,ncol)
Output$AllResults = list(Exposurelist,Signaturelist,GKLvalues)
Output$convergence = conv[optimal]
Output$intermed = intermed
return(Output)
}
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 4, DesignMatrix = rep(list(Mdi),4),tol=tol,Seeds=c(300:350))
source("BRCA/loadBRCAmodels.R")
# now changed to 5000 max iterations
DiRes4 <- NMFglmSQR(Data = V, NoSignatures = 4, DesignMatrix = rep(list(Mdi),4),tol=tol,Seeds=c(320:330))
