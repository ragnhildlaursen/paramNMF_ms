rm(list=ls())
################################################################
## Robustness of Signatures
################################################################
library(foreach)
library(doParallel)
library(parallel)
cores=detectCores()
cl <- makeCluster(cores[1]-1)
source("loadBRCAmodels.R")
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 4
setwd("~/projects/paramNMF_ms")
################################################################
## Robustness of Signatures
################################################################
library(foreach)
library(doParallel)
library(parallel)
cores=detectCores()
cl <- makeCluster(cores[1]-1)
source("loadBRCAmodels.R")
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 4
dwn <- 20  # Down sampling 100, 50, 20, 10
nSim <- 10  # 5 if small study. 100 if intermediate. 200 if large.
ResCosineMatTri <- matrix(0,nrow=noSig,ncol=nSim)
ResCosineMatMix <- matrix(0,nrow=noSig,ncol=nSim)
ResCosineMatDi <- matrix(0,nrow=noSig,ncol=nSim)
ResCosineMatMono <- matrix(0,nrow=noSig,ncol=nSim)
#foreach(nsim=1:nSim, .combine=c, .inorder=FALSE,.export = ls(globalenv())) %dopar% {
for(nsim in 1:nSim){
cat(nsim,"out of",nSim,"\n")
nSimMt <- round(rowSums(V)/dwn)
for (i in 1:nG){
set.seed(NULL)
sim <- sample( x=1:nMtTps , size=nSimMt[i], replace=TRUE, prob=V[i,])
sampleV[i,] <- tabulate(sim,nbins=nMtTps)
}
sampleV[sampleV == 0] = .Machine$double.eps
ResultFixTri <- NMFglmSQR(Data = sampleV, NoSignatures = noSig, DesignMatrix = rep(list(Mfull),4), tol=2,Seeds=sample(1:100,5))
ResultFixMix <- NMFglmSQR(Data = sampleV, NoSignatures = noSig, DesignMatrix = list(Mfull,Mdi,Mdi,Mmono),tol=2,Seeds=sample(1:100,5))
ResultFixDi <- NMFglmSQR(Data = sampleV, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),4),tol=2,Seeds=sample(1:100,5))
ResultFixMono <- NMFglmSQR(Data = sampleV, NoSignatures = noSig, DesignMatrix = rep(list(Mmono),4),tol=2,Seeds=sample(1:100,5))
## Compare signatures: Cosine similarity for each patient
ResCosineMatTri[,nsim] = cosMatch(TriRes$Signatures[i,],ResultFixTri$Signatures[i,])$cossim
ResCosineMatMix[,nsim] = cosMatch(MixRes$Signatures[i,],ResultFixMix$Signatures[i,])$cossim
ResCosineMatDi[,nsim] = cosMatch(DiRes$Signatures[i,],ResultFixDi$Signatures[i,])$cossim
ResCosineMatMono[,nsim] = cosMatch(MonoRes$Signatures[i,],ResultFixMono$Signatures[i,])$cossim
save(ResCosineMatTri,ResCosineMatMix,ResCosineMatDi,ResCosineMatMono, file = "SimilaritySignaturesBRCA.RData")
}
rm(list=ls())
source("loadBRCAmodels.R")
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 4
dwn <- 20  # Down sampling 100, 50, 20, 10
nSim <- 10  # 5 if small study. 100 if intermediate. 200 if large.
ResCosineMatTri <- matrix(0,nrow=noSig,ncol=nSim)
ResCosineMatMix <- matrix(0,nrow=noSig,ncol=nSim)
ResCosineMatDi <- matrix(0,nrow=noSig,ncol=nSim)
ResCosineMatMono <- matrix(0,nrow=noSig,ncol=nSim)
#foreach(nsim=1:nSim, .combine=c, .inorder=FALSE,.export = ls(globalenv())) %dopar% {
for(nsim in 1:nSim){
cat(nsim,"out of",nSim,"\n")
nSimMt <- round(rowSums(V)/dwn)
for (i in 1:nG){
set.seed(NULL)
sim <- sample( x=1:nMtTps , size=nSimMt[i], replace=TRUE, prob=V[i,])
sampleV[i,] <- tabulate(sim,nbins=nMtTps)
}
sampleV[sampleV == 0] = .Machine$double.eps
ResultFixTri <- NMFglmSQR(Data = sampleV, NoSignatures = noSig, DesignMatrix = rep(list(Mfull),4), tol=2,Seeds=sample(1:100,5))
ResultFixMix <- NMFglmSQR(Data = sampleV, NoSignatures = noSig, DesignMatrix = list(Mfull,Mdi,Mdi,Mmono),tol=2,Seeds=sample(1:100,5))
ResultFixDi <- NMFglmSQR(Data = sampleV, NoSignatures = noSig, DesignMatrix = rep(list(Mdi),4),tol=2,Seeds=sample(1:100,5))
ResultFixMono <- NMFglmSQR(Data = sampleV, NoSignatures = noSig, DesignMatrix = rep(list(Mmono),4),tol=2,Seeds=sample(1:100,5))
## Compare signatures: Cosine similarity for each patient
ResCosineMatTri[,nsim] = cosMatch(TriRes$Signatures,ResultFixTri$Signatures)$cossim
ResCosineMatMix[,nsim] = cosMatch(MixRes$Signatures,ResultFixMix$Signatures)$cossim
ResCosineMatDi[,nsim] = cosMatch(DiRes$Signatures,ResultFixDi$Signatures)$cossim
ResCosineMatMono[,nsim] = cosMatch(MonoRes$Signatures,ResultFixMono$Signatures)$cossim
save(ResCosineMatTri,ResCosineMatMix,ResCosineMatDi,ResCosineMatMono, file = "SimilaritySignaturesBRCA.RData")
}
