df$V1 <- as.numeric(df$V1)
df$patients = paste(patients,"patients")
df$noSig = paste(noSig)
return(df)
}
resDFab = function(res,patients,noSig){
n_sim = length(res)
CV = numeric(n_sim)
AIC = numeric(n_sim)
BIC1 = numeric(n_sim)
BIC2 = numeric(n_sim)
n_sig <<- res[[1]]$sig_no
k_min <<- min(n_sig)
k_max <<- max(n_sig)
for(sim in 1:n_sim){
#CV[sim] = res[[sim]]$sig_no[which.min(res[[sim]]$CVcost)]
aic = -2*res[[sim]]$FDcost + 2*(res[[sim]]$sig_no*(96 + patients))
AIC[sim] = res[[sim]]$sig_no[which.min(aic)]
bic1 = -2*res[[sim]]$FDcost + log(96*patients)*(res[[sim]]$sig_no*(96 + patients))
BIC1[sim] = res[[sim]]$sig_no[which.min(bic1)]
bic2 = -2*res[[sim]]$FDcost + log(patients)*(res[[sim]]$sig_no*(96 + patients))
BIC2[sim] = res[[sim]]$sig_no[which.min(bic2)]
}
cols <<- c("#E69F00", "#56B4E9","#D55E00")
method = c("AIC", "BIC1", "BIC")
df <- data.frame(cbind(c(AIC, BIC1, BIC2), Method = rep(method, each = n_sim), colors = rep(cols, each = n_sim)))
df$V1 <- as.numeric(df$V1)
df$patients = paste(patients,"patients")
df$noSig = paste(noSig)
return(df)
}
par(mfrow = c(1,1))
res = readRDS("data/res20NB10alpha5sig25pat.rds")
res = readRDS("data/res20NB10alpha5sig100pat.rds")
# Negative binomial data using poisson NMF
res = readRDS("data/res100NB10alpha5sig100pat2Pois.rds")
# Negative binomial data using poisson NMF
res = readRDS("data/res100NB10alpha5sig100pat2Pois.rds")
df10pois = resDF(res,100,5)
df10pois$alpha = "alpha = 10"
df10pois$V1[df10pois$Method == "AIC"] = 20
df10pois$V1[df10pois$Method == "BIC"] = 20
res = readRDS("data/res100NB200alpha5sig100pat2Pois.rds")
df100pois = resDF(res,100,5)
df100pois$alpha = "alpha = 200"
df100pois$V1[df100pois$Method == "AIC"] = resab$V1[resab$Method == "AIC"]
dfpois = rbind(df10pois,df100pois)
# Negative binomial data using negative binomial NMF
res = readRDS("data/res100NB10alpha5sig100pat2.rds")
df10nb = resDF(res,100,5)
df10nb$alpha = "alpha = 10"
res = readRDS("data/res100NB200alpha5sig100pat2.rds")
df100nb = resDF(res,100,5)
dfpois = rbind(df10pois,df100pois)
# Negative binomial data using negative binomial NMF
res = readRDS("data/res100NB10alpha5sig100pat2.rds")
df10nb = resDF(res,100,5)
df10nb$alpha = "alpha = 10"
res = readRDS("data/res100NB200alpha5sig100pat2.rds")
df100nb = resDF(res,100,5)
df100nb$alpha = "alpha = 200"
dfnb = rbind(df10nb,df100nb)
dfnb$V1 = factor(dfnb$V1, levels = c(2:10))
dfpois$NMF = "Po-NMF"
dfnb$NMF = "NB-NMF"
dfall = rbind(dfpois,dfnb)
dfall$NMF = factor(dfall$NMF)
dfall = dfall[dfall$Method != "BIC1",]
#### Plot in histogram plot between NB-NMF and Pois-NMF ###############################
ggplot(data = dfall, aes(x=V1, fill = Method)) +
geom_bar(position=position_dodge2(preserve = "single"))  +
scale_fill_manual(values=cols) +
facet_grid(cols = vars(NMF), rows = vars(alpha), scales = "free_x")+
labs(x=paste0("No. signatures"), y="Counts") +
#ggtitle(paste("Negative binomial distributed data")) +
theme(plot.title = element_text(size = 14, face = "bold"),
axis.text=element_text(size=15),
axis.text.x = element_text(face = c(rep("plain",1),"bold",rep("plain",6))),
axis.title=element_text(size=15),
strip.text.x = element_text(size = 13, face = "bold", hjust = 0),
strip.text.y = element_text(size = 13, face = "bold"),
strip.background.x = element_blank(),
legend.title=element_text(size=13), legend.position = "bottom",
legend.text=element_text(size=13)) +
scale_x_continuous(breaks=seq(3,20, by = 2), limits=c(2-0.5,20+0.5)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
View(dfall)
#### Plot in histogram plot between NB-NMF and Pois-NMF ###############################
ggplot(data = dfall, aes(x=V1, fill = Method)) +
geom_bar(position=position_dodge2(preserve = "single"))  +
scale_fill_manual(values=cols) +
facet_grid(cols = vars(NMF), rows = vars(alpha), scales = "free_x")+
labs(x=paste0("No. signatures"), y="Counts") +
#ggtitle(paste("Negative binomial distributed data")) +
theme(plot.title = element_text(size = 14, face = "bold"),
axis.text=element_text(size=15),
axis.text.x = element_text(face = c(rep("plain",1),"bold",rep("plain",6))),
axis.title=element_text(size=15),
strip.text.x = element_text(size = 13, face = "bold", hjust = 0),
strip.text.y = element_text(size = 13, face = "bold"),
strip.background.x = element_blank(),
legend.title=element_text(size=13), legend.position = "bottom",
legend.text=element_text(size=13)) +
#scale_x_continuous(breaks=seq(3,20, by = 2), limits=c(2-0.5,20+0.5)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
#### Plot in histogram plot between NB-NMF and Pois-NMF ###############################
ggplot(data = dfall, aes(x=V1, fill = Method)) +
geom_bar(position=position_dodge2(preserve = "single"))  +
scale_fill_manual(values=cols) +
facet_grid(cols = vars(NMF), rows = vars(alpha), scales = "free_x")+
labs(x=paste0("No. signatures"), y="Counts") +
#ggtitle(paste("Negative binomial distributed data")) +
theme(plot.title = element_text(size = 14, face = "bold"),
axis.text=element_text(size=15),
axis.text.x = element_text(face = c(rep("plain",1),"bold",rep("plain",6))),
axis.title=element_text(size=15),
strip.text.x = element_text(size = 13, face = "bold", hjust = 0),
strip.text.y = element_text(size = 13, face = "bold"),
strip.background.x = element_blank(),
legend.title=element_text(size=13), legend.position = "bottom",
legend.text=element_text(size=13)) +
scale_x_discrete(breaks=seq(3,20, by = 2), limits=c(2-0.5,20+0.5)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
#### Plot in histogram plot between NB-NMF and Pois-NMF ###############################
ggplot(data = dfall, aes(x=V1, fill = Method)) +
geom_bar(position=position_dodge2(preserve = "single"))  +
scale_fill_manual(values=cols) +
facet_grid(cols = vars(NMF), rows = vars(alpha), scales = "free_x")+
labs(x=paste0("No. signatures"), y="Counts") +
#ggtitle(paste("Negative binomial distributed data")) +
theme(plot.title = element_text(size = 14, face = "bold"),
axis.text=element_text(size=15),
axis.text.x = element_text(face = c(rep("plain",1),"bold",rep("plain",6))),
axis.title=element_text(size=15),
strip.text.x = element_text(size = 13, face = "bold", hjust = 0),
strip.text.y = element_text(size = 13, face = "bold"),
strip.background.x = element_blank(),
legend.title=element_text(size=13), legend.position = "bottom",
legend.text=element_text(size=13)) +
scale_x_discrete(breaks=seq(3,20, by = 2), limits=c(1-0.5,20+0.5)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
#### Plot in histogram plot between NB-NMF and Pois-NMF ###############################
ggplot(data = dfall, aes(x=V1, fill = Method)) +
geom_bar(position=position_dodge2(preserve = "single"))  +
scale_fill_manual(values=cols) +
facet_grid(cols = vars(NMF), rows = vars(alpha), scales = "free_x")+
labs(x=paste0("No. signatures"), y="Counts") +
#ggtitle(paste("Negative binomial distributed data")) +
theme(plot.title = element_text(size = 14, face = "bold"),
axis.text=element_text(size=15),
axis.text.x = element_text(face = c(rep("plain",1),"bold",rep("plain",6))),
axis.title=element_text(size=15),
strip.text.x = element_text(size = 13, face = "bold", hjust = 0),
strip.text.y = element_text(size = 13, face = "bold"),
strip.background.x = element_blank(),
legend.title=element_text(size=13), legend.position = "bottom",
legend.text=element_text(size=13)) +
scale_x_continuous(breaks=seq(1,20, by = 2), limits=c(1-0.5,20+0.5)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
seq(1,20, by = 2)
dfnb$V1 = factor(dfnb$V1, levels = c(2:20))
dfnb = rbind(df10nb,df100nb)
dfnb$V1 = factor(dfnb$V1, levels = c(2:20))
dfpois$NMF = "Po-NMF"
dfnb$NMF = "NB-NMF"
dfall = rbind(dfpois,dfnb)
dfall$NMF = factor(dfall$NMF)
dfall = dfall[dfall$Method != "BIC1",]
#### Plot in histogram plot between NB-NMF and Pois-NMF ###############################
ggplot(data = dfall, aes(x=V1, fill = Method)) +
geom_bar(position=position_dodge2(preserve = "single"))  +
scale_fill_manual(values=cols) +
facet_grid(cols = vars(NMF), rows = vars(alpha), scales = "free_x")+
labs(x=paste0("No. signatures"), y="Counts") +
#ggtitle(paste("Negative binomial distributed data")) +
theme(plot.title = element_text(size = 14, face = "bold"),
axis.text=element_text(size=15),
axis.text.x = element_text(face = c(rep("plain",1),"bold",rep("plain",6))),
axis.title=element_text(size=15),
strip.text.x = element_text(size = 13, face = "bold", hjust = 0),
strip.text.y = element_text(size = 13, face = "bold"),
strip.background.x = element_blank(),
legend.title=element_text(size=13), legend.position = "bottom",
legend.text=element_text(size=13)) +
scale_x_continuous(breaks=seq(1,20, by = 2), limits=c(1-0.5,20+0.5)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
library(ggplot2)
library(gridExtra)
library(ggpubr)
#############################################
## Data simulation to result plot
#############################################
rm(list=ls())
setwd("C:/Users/au543194/Desktop/Noter/NegBin_CV/CV_ModSel_with_NB")
library(ggplot2)
library(gridExtra)
library(ggpubr)
resDF = function(res,patients,noSig){
n_sim = length(res)
CV = numeric(n_sim)
AIC = numeric(n_sim)
BIC1 = numeric(n_sim)
BIC2 = numeric(n_sim)
n_sig <<- res[[1]]$sig_no
k_min <<- min(n_sig)
k_max <<- max(n_sig)
for(sim in 1:n_sim){
CV[sim] = res[[sim]]$sig_no[which.min(res[[sim]]$CVcost)]
aic = -2*res[[sim]]$FDcost + 2*(res[[sim]]$sig_no*(96 + patients))
AIC[sim] = res[[sim]]$sig_no[which.min(aic)]
bic1 = -2*res[[sim]]$FDcost + log(96*patients)*(res[[sim]]$sig_no*(96 + patients))
BIC1[sim] = res[[sim]]$sig_no[which.min(bic1)]
bic2 = -2*res[[sim]]$FDcost + log(patients)*(res[[sim]]$sig_no*(96 + patients))
BIC2[sim] = res[[sim]]$sig_no[which.min(bic2)]
}
cols <<- c("#E69F00", "#56B4E9","#D55E00","#F0E442")
method = c("AIC", "BIC1", "BIC", "CV")
df <- data.frame(cbind(c(AIC, BIC1, BIC2, CV), Method = rep(method, each = n_sim), colors = rep(cols, each = n_sim)))
df$V1 <- as.numeric(df$V1)
df$patients = paste(patients,"patients")
df$noSig = paste(noSig)
return(df)
}
resDFab = function(res,patients,noSig){
n_sim = length(res)
CV = numeric(n_sim)
AIC = numeric(n_sim)
BIC1 = numeric(n_sim)
BIC2 = numeric(n_sim)
n_sig <<- res[[1]]$sig_no
k_min <<- min(n_sig)
k_max <<- max(n_sig)
for(sim in 1:n_sim){
#CV[sim] = res[[sim]]$sig_no[which.min(res[[sim]]$CVcost)]
aic = -2*res[[sim]]$FDcost + 2*(res[[sim]]$sig_no*(96 + patients))
AIC[sim] = res[[sim]]$sig_no[which.min(aic)]
bic1 = -2*res[[sim]]$FDcost + log(96*patients)*(res[[sim]]$sig_no*(96 + patients))
BIC1[sim] = res[[sim]]$sig_no[which.min(bic1)]
bic2 = -2*res[[sim]]$FDcost + log(patients)*(res[[sim]]$sig_no*(96 + patients))
BIC2[sim] = res[[sim]]$sig_no[which.min(bic2)]
}
cols <<- c("#E69F00", "#56B4E9","#D55E00")
method = c("AIC", "BIC1", "BIC")
df <- data.frame(cbind(c(AIC, BIC1, BIC2), Method = rep(method, each = n_sim), colors = rep(cols, each = n_sim)))
df$V1 <- as.numeric(df$V1)
df$patients = paste(patients,"patients")
df$noSig = paste(noSig)
return(df)
}
par(mfrow = c(1,1))
res = readRDS("data/res20NB10alpha5sig25pat.rds")
res = readRDS("data/res20NB10alpha5sig100pat.rds")
# Negative binomial data using poisson NMF
res = readRDS("data/res100NB10alpha5sig100pat2Pois.rds")
df10pois = resDF(res,100,5)
View(df10pois)
df10pois$alpha = "alpha = 10"
res = readRDS("data/res100NB200alpha5sig100pat2Pois.rds")
df100pois = resDF(res,100,5)
df100pois$alpha = "alpha = 200"
View(resDF)
# Negative binomial data using poisson NMF
res = readRDS("data/res100NB10alpha5sig100pat2Pois.rds")
df10pois = resDF(res,100,5)
range(df10pois$V1)
#### Plot in histogram plot between NB-NMF and Pois-NMF ###############################
ggplot(data = dfall, aes(x=V1, fill = Method)) +
geom_bar(position=position_dodge2(preserve = "single"))  +
scale_fill_manual(values=cols) +
facet_grid(cols = vars(NMF), rows = vars(alpha), scales = "free_x")+
labs(x=paste0("No. signatures"), y="Counts") +
#ggtitle(paste("Negative binomial distributed data")) +
theme(plot.title = element_text(size = 14, face = "bold"),
axis.text=element_text(size=15),
axis.text.x = element_text(face = c(rep("plain",1),"bold",rep("plain",6))),
axis.title=element_text(size=15),
strip.text.x = element_text(size = 13, face = "bold", hjust = 0),
strip.text.y = element_text(size = 13, face = "bold"),
strip.background.x = element_blank(),
legend.title=element_text(size=13), legend.position = "bottom",
legend.text=element_text(size=13)) +
scale_x_continuous(breaks=seq(1,20, by = 2), limits=c(1-0.5,20+0.5)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
## Testing on the large data splitting up by the cancer type.
Data = read.csv("WGS_PCAWG.96.csv")
setwd("C:/Users/au543194/Desktop/Intruktor/IdaogKim/SparseNMF")
## Testing on the large data splitting up by the cancer type.
Data = read.csv("WGS_PCAWG.96.csv")
#Dat2 = read.csv("WGS_Other.96.csv")
cancer.type = substr(colnames(Data)[-c(1,2)],start = 1, stop = 6)
cancer.type = factor(cancer.type)
table(cancer.type)
dim(cancer.type)
dim(Data)
rm(list=ls())
#setwd("C:/Users/au543194/Documents/projects/paramNMF_ms")
################################################################
## Robustness of Signatures
################################################################
# library(foreach)
# library(doParallel)
# library(parallel)
#
# cores=detectCores()
# cl <- makeCluster(cores[1]-1)
library(ggplot2)
library(ggpubr)
source("UCUT/loadUCUTmodels.R")
setwd("~/projects/paramNMF_ms")
library(ggplot2)
library(ggpubr)
source("UCUT/loadUCUTmodels.R")
dim(V)
View(resMat)
1536/6
View(V)
library(ggplot2)
library(ggpubr)
source("UCUT/loadUCUTmodels.R")
resMono = resFactors[[1]]
resDi = resFactors[[19]]
resPenta = resFactors[[21]]
mMono = cosMatch(PentaRes$signatures, MonoRes$signatures)$match
mMono = cosMatch(resPenta$signatures, resMono$signatures)$match
mDi = cosMatch(resPenta$signatures, resDi$signatures)$match
noSig = 2
sub = factor(rep(c("C > A","C > G","C > T","T > A","T > C","T > G"), each = 256))
# mono
dat = data.frame(m = factor(colnames(V), levels=unique(colnames(V))), sub, S =  t(resMono$signatures[mMono,]))
dat$type = "mono"
datmono = reshape(dat, varying = paste0("S.",c(1:noSig)), direction = "long", v.names = "true", timevar = "Signature")
# di
dat = data.frame(m = factor(colnames(V), levels=unique(colnames(V))), sub, S =  t(resDi$signatures[mDi,]))
dat$type = "di"
datdi = reshape(dat, varying = paste0("S.",c(1:noSig)), direction = "long", v.names = "true", timevar = "Signature")
# penta
dat = data.frame(m = factor(colnames(V), levels=unique(colnames(V))), sub, S =  t(resPenta$signatures))
dat$type = "tri"
datpenta = reshape(dat, varying = paste0("S.",c(1:noSig)), direction = "long", v.names = "true", timevar = "Signature")
datall = rbind(datmono,datdi,datpenta)
col.sub = c("#800080", "#FF9912", "#436EEE", "#ffdf12", "#27408B", "#E066FF")
datall$comb = paste0(datall$time,datall$sub)
datall$type = factor(datall$type, levels = c("mono","di","mix","tri"))
colors3 = c("#AC0136","#FF9912", "#436EEE", "#27408B")
plots = list()
for(sig in 1:noSig){
plots[[sig]] = ggplot(datall[datall$Signature == sig, ], aes(x = m, y = true, fill = type))+
geom_bar(stat = "identity", width = 0.5)+
facet_grid(rows = vars(type), cols = vars(sub), scale = "free_x", switch = "x",labeller = labeller(time = time.labs))+
#theme_bw()+
theme(text = element_text(size=8, face = "bold"),
axis.text.x=element_blank(),
strip.text = element_blank(),
axis.ticks.x = element_blank(),
#legend.position = "none",
#strip.text.y.right = element_text(angle = -90, size = 8),
strip.background.x = element_rect(color="black", fill="white",linetype="blank"),
strip.text.x = element_text(size = 9), panel.spacing.x = unit(0.2,"line"))+
ylab("")+xlab("")+
ggtitle(paste("Signature",sig))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1), n.breaks = 3)+
scale_fill_manual(values = colors3, labels = c("Mono","Di",'Mix',"Tri"),
name = "Interaction model")
}
for(sig in 1:noSig){
plots[[sig]] = ggplot(datall[datall$Signature == sig, ], aes(x = m, y = true, fill = type))+
geom_bar(stat = "identity", width = 0.5)+
facet_grid(rows = vars(type), cols = vars(sub), scale = "free_x", switch = "x")+
#theme_bw()+
theme(text = element_text(size=8, face = "bold"),
axis.text.x=element_blank(),
strip.text = element_blank(),
axis.ticks.x = element_blank(),
#legend.position = "none",
#strip.text.y.right = element_text(angle = -90, size = 8),
strip.background.x = element_rect(color="black", fill="white",linetype="blank"),
strip.text.x = element_text(size = 9), panel.spacing.x = unit(0.2,"line"))+
ylab("")+xlab("")+
ggtitle(paste("Signature",sig))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1), n.breaks = 3)+
scale_fill_manual(values = colors3, labels = c("Mono","Di",'Mix',"Tri"),
name = "Interaction model")
}
ggarrange(plots[[1]],plots[[2]], nrow = 2, common.legend = T, legend = "bottom")
ggarrange(plots[[1]],plots[[2]], ncol = 2, common.legend = T, legend = "bottom")
datall$type = factor(datall$type, levels = c("mono","di","penta"))
colors3 = c("#AC0136","#FF9912", "#436EEE", "#27408B")
plots = list()
for(sig in 1:noSig){
plots[[sig]] = ggplot(datall[datall$Signature == sig, ], aes(x = m, y = true, fill = type))+
geom_bar(stat = "identity", width = 0.5)+
facet_grid(rows = vars(type), cols = vars(sub), scale = "free_x", switch = "x")+
#theme_bw()+
theme(text = element_text(size=8, face = "bold"),
axis.text.x=element_blank(),
strip.text = element_blank(),
axis.ticks.x = element_blank(),
#legend.position = "none",
#strip.text.y.right = element_text(angle = -90, size = 8),
strip.background.x = element_rect(color="black", fill="white",linetype="blank"),
strip.text.x = element_text(size = 9), panel.spacing.x = unit(0.2,"line"))+
ylab("")+xlab("")+
ggtitle(paste("Signature",sig))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1), n.breaks = 3)+
scale_fill_manual(values = colors3, labels = c("Mono","Di","Penta"),
name = "Interaction model")
}
ggarrange(plots[[1]],plots[[2]], ncol = 2, common.legend = T, legend = "bottom")
datall$comb = paste0(datall$time,datall$sub)
datall$type = factor(datall$type, levels = c("mono","di","penta"))
colors3 = c("#AC0136","#FF9912", "#436EEE")
plots = list()
for(sig in 1:noSig){
plots[[sig]] = ggplot(datall[datall$Signature == sig, ], aes(x = m, y = true, fill = type))+
geom_bar(stat = "identity", width = 0.5)+
facet_grid(rows = vars(type), cols = vars(sub), scale = "free_x", switch = "x")+
#theme_bw()+
theme(text = element_text(size=8, face = "bold"),
axis.text.x=element_blank(),
strip.text = element_blank(),
axis.ticks.x = element_blank(),
#legend.position = "none",
#strip.text.y.right = element_text(angle = -90, size = 8),
strip.background.x = element_rect(color="black", fill="white",linetype="blank"),
strip.text.x = element_text(size = 9), panel.spacing.x = unit(0.2,"line"))+
ylab("")+xlab("")+
ggtitle(paste("Signature",sig))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1), n.breaks = 3)+
scale_fill_manual(values = colors3, labels = c("Mono","Di","Penta"),
name = "Interaction model")
}
ggarrange(plots[[1]],plots[[2]], ncol = 2, common.legend = T, legend = "bottom")
# mono
dat = data.frame(m = factor(colnames(V), levels=unique(colnames(V))), sub, S =  t(resMono$signatures[mMono,]))
dat$type = "mono"
datmono = reshape(dat, varying = paste0("S.",c(1:noSig)), direction = "long", v.names = "true", timevar = "Signature")
# di
dat = data.frame(m = factor(colnames(V), levels=unique(colnames(V))), sub, S =  t(resDi$signatures[mDi,]))
dat$type = "di"
datdi = reshape(dat, varying = paste0("S.",c(1:noSig)), direction = "long", v.names = "true", timevar = "Signature")
# penta
dat = data.frame(m = factor(colnames(V), levels=unique(colnames(V))), sub, S =  t(resPenta$signatures))
dat$type = "penta"
datpenta = reshape(dat, varying = paste0("S.",c(1:noSig)), direction = "long", v.names = "true", timevar = "Signature")
datall = rbind(datmono,datdi,datpenta)
col.sub = c("#800080", "#FF9912", "#436EEE", "#ffdf12", "#27408B", "#E066FF")
datall$comb = paste0(datall$time,datall$sub)
datall$type = factor(datall$type, levels = c("mono","di","penta"))
colors3 = c("#AC0136","#FF9912", "#436EEE")
plots = list()
for(sig in 1:noSig){
plots[[sig]] = ggplot(datall[datall$Signature == sig, ], aes(x = m, y = true, fill = type))+
geom_bar(stat = "identity", width = 0.5)+
facet_grid(rows = vars(type), cols = vars(sub), scale = "free_x", switch = "x")+
#theme_bw()+
theme(text = element_text(size=8, face = "bold"),
axis.text.x=element_blank(),
strip.text = element_blank(),
axis.ticks.x = element_blank(),
#legend.position = "none",
#strip.text.y.right = element_text(angle = -90, size = 8),
strip.background.x = element_rect(color="black", fill="white",linetype="blank"),
strip.text.x = element_text(size = 9), panel.spacing.x = unit(0.2,"line"))+
ylab("")+xlab("")+
ggtitle(paste("Signature",sig))+
scale_y_continuous(labels = scales::percent_format(accuracy = 1), n.breaks = 3)+
scale_fill_manual(values = colors3, labels = c("Mono","Di","Penta"),
name = "Interaction model")
}
ggarrange(plots[[1]],plots[[2]], ncol = 2, common.legend = T, legend = "bottom")
dim(model.matrix(~l2*l1*m+l1*m*r1+m*r1*r2))
setwd("~/projects/paramNMF_ms")
library(ggplot2)
library(ggpubr)
source("UCUT/loadUCUTmodels.R")
MonoRes = resFactors[[1]]
DiRes = resFactors[[19]]
PentaRes = resFactors[[21]]
mMono = cosMatch(PentaRes$signatures, MonoRes$signatures)$match
mPenta = cosMatch(PentaRes$signatures, DiRes$signatures)$match
##-----------------------------------------------------------------------
## Sample a number of mutations from each patient (downsampling)
##-----------------------------------------------------------------------
sampleV <- V
nG <- dim(V)[1]     # Number of patients (genomes)
nMtTps <- dim(V)[2] # Number of mutation types
nMt <- rowSums(V)
noSig = 2
nSim <- 50  # 5 if small study. 100 if intermediate. 200 if large.
init = 2   # number of initialisations
tol = 1
ResCosineMatPenta <- matrix(0,nrow=noSig,ncol=nSim)
ResCosineMatDi <- matrix(0,nrow=noSig,ncol=nSim)
ResCosineMatMono <- matrix(0,nrow=noSig,ncol=nSim)
for(nsim in 1:nSim){
cat(nsim,"out of",nSim,"\n")
nSimMt <- rowSums(V) # could potentially downsample
estimate = PentaRes$exposures%*%PentaRes$signatures
sampleV = matrix(rpois(nG*nMtTps, estimate), nrow = nG)
ResultFixPenta <- nmfprm(data = sampleV, noSignatures = noSig, designMatrices = rep(list(Mfull),noSig), tol=tol,initial = init)
estimate = DiRes$exposures%*%DiRes$signatures
sampleV = matrix(rpois(nG*nMtTps, estimate), nrow = nG)
ResultFixDi <- nmfprm(data = sampleV, noSignatures = noSig, designMatrices = rep(list(Mnghbr),noSig),tol=tol,initial = init)
estimate = MonoRes$exposures%*%MonoRes$signatures
sampleV = matrix(rpois(nG*nMtTps, estimate), nrow = nG)
ResultFixMono <- nmfprm(data = sampleV, noSignatures = noSig, designMatrices = rep(list(Mmono),noSig),tol=tol,initial = init)
# Compare signatures: Cosine similarity for each patient
ResCosineMatPenta[,nsim] = cosMatch(PentaRes$signatures,ResultFixPenta$signatures)$cossim
ResCosineMatDi[,nsim] = cosMatch(DiRes$signatures[mDi,],ResultFixDi$signatures)$cossim
ResCosineMatMono[,nsim] = cosMatch(MonoRes$signatures[mMono,],ResultFixMono$signatures)$cossim
#save(ResCosineMatPenta, ResCosineMatDi, ResCosineMatMono, file = "SimilaritySignaturesUCUTparamboot.RData")
}
